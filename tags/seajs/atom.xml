<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: SeaJs | 屁熊猫的实验室]]></title>
  <link href="http://PPPanda.github.com/tags/seajs/atom.xml" rel="self"/>
  <link href="http://PPPanda.github.com/"/>
  <updated>2014-10-16T15:12:38+08:00</updated>
  <id>http://PPPanda.github.com/</id>
  <author>
    <name><![CDATA[PPanda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[seaJs入门简介]]></title>
    <link href="http://PPPanda.github.com/article/seajs-use.html"/>
    <updated>2012-12-12T16:14:00+08:00</updated>
    <id>http://PPPanda.github.com/article/seajs-use</id>
    <content type="html"><![CDATA[<h2>seaJs是啥子</h2>

<blockquote><p>SeaJS 是由玉伯开发的一个遵循 CommonJS 规范的模块加载框架，可用来轻松愉悦地加载任意 JavaScript 模块和css模块样式。SeaJS非常小巧，小巧在于压缩和gzip后体积只有4K,而且接口和方法也非常少，SeaJS 就两个核心：模块定义和 模块的加载及依赖关系。SeaJS非常强大，SeaJS可以加载任意 JavaScript 模块和css模块样式，SeaJS会保证你在使用一个模块时,已经将所依赖的其他模块载入到脚本运行环境中。玉伯的说法，SeaJS可以让你享受写代码的乐趣，不用去管那些加载的问题。</p>

<p>SeaJS 是一个适用于 Web 浏览器端的模块加载器。在 SeaJS 里，一切皆是模块，所有模块协同构建成模块系统。SeaJS 首要要解决的是模块系统的基本问题：
在前端开发领域，一个模块，可以是JS 模块，也可以是 CSS 模块，或是 Template 等模块。在 SeaJS 里，我们专注于 JS 模块（其他类型的模块可以转换为 JS 模块）</p></blockquote>

<p>使用SeaJs会改变正常引入js文件的方式,不需要使用<code>&lt;script src="script.js"&gt;&lt;/script&gt;</code>引入js文件，而是使用<code>require</code>引入所依赖js文件，每个功能模块所承担的功能和依赖的js文件一目了然，然后就是Enjoy coding了。</p>

<h3>定义模块</h3>

<p>{% codeblock lang:js %}</p>

<p>//define 模块基本factory参数用法
define(function(require,exports,module){</p>

<pre><code>exports.Fn = function(para) {
    //do Something
};
</code></pre>

<p>});</p>

<p>define(function(require, exports, module) {</p>

<pre><code>var $ = require('jquery'); //引入jquery模块
var ST = require('sntouch'); //引入sntouch模块

var data1 = 1; //私有数据

var func1 = function() { //私有方法
    return 'func1'
}

exports.data2 = 2; //公共数据

exports.func2 = function(str) { //公共方法
    alert(str)
}
</code></pre>

<p>});
{% endcodeblock %}</p>

<!--more -->


<p>exports参数是用来向外提供模块的 API.也就是通过这个exports其他的模块就能访问func2方法。</p>

<h3>加载模块</h3>

<p>先引入sea.js
使用sayHello模块：
{% codeblock lang:js %}
seajs.use("alias/main",function(s){</p>

<pre><code>s.func2("Hello SeaJS!");
</code></pre>

<p>});
{% endcodeblock %}</p>

<h3>模块的依赖关系</h3>

<p>{% codeblock 小例子 lang:js http://lab.ppanda.com/demo/seajs.html Demo %}
define(function(require, exports, module) {</p>

<pre><code>require('base_book'); //引入一个小js库
require('../../stylesheets/filter.css')
var data1 = 1; //私有数据
var id = "#search_box";

exports.data2 = 2; //公共数据

exports.func2 = function(str) { //公共方法
    alert(str)
}
exports.filter = function(){
    ST.Widget.SearchPop(id,"a");
    ST.Widget.Shake()
}
</code></pre>

<p>});</p>

<p>{% endcodeblock %}</p>

<h3>配置</h3>

<p><a href="https://github.com/seajs/seajs/issues/262"><code>seajs.config</code></a></p>

<p>{% codeblock lang:js %}
seajs.config({
  alias: {</p>

<pre><code>'app': 'http://path/to/app',
'jquery': 'gallery/jquery/1.8.2/jquery'
</code></pre>

<p>  }
});</p>

<p>{% endcodeblock %}</p>

<h3>CMD规范</h3>

<p>seaJs遵守<a href="https://github.com/seajs/seajs/issues/242">CMD</a>模块定义规范，理解CMD对更好的理解seaJs有很大的帮助</p>

<h3>spm</h3>

<p>最强大的是seaJs配合<a href="https://github.com/spmjs/spm/wiki/Hello-spm%EF%BC%9A%E4%BD%BF%E7%94%A8-spm-%E5%92%8C-SeaJS-%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E4%B8%AD%E5%9E%8B%E9%A1%B9%E7%9B%AE">spm</a>使用完全解决了所谓的加载对性能的影响问题，开发人员可以专注到代码当中而不必考虑加载的相关事宜。</p>

<hr />

<p><strong>入门介绍完毕，下次详细讲解具体用法</strong></p>
]]></content>
  </entry>
  
</feed>
