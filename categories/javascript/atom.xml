<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | 屁熊猫的实验室]]></title>
  <link href="http://PPPanda.github.com/categories/javascript/atom.xml" rel="self"/>
  <link href="http://PPPanda.github.com/"/>
  <updated>2013-01-30T19:26:06+08:00</updated>
  <id>http://PPPanda.github.com/</id>
  <author>
    <name><![CDATA[PPanda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javascript代码设计浅析]]></title>
    <link href="http://PPPanda.github.com/article/javascript-patterns.html"/>
    <updated>2013-01-30T15:46:00+08:00</updated>
    <id>http://PPPanda.github.com/article/javascript-patterns</id>
    <content type="html"><![CDATA[<p>内部讨论了一下代码设计模式方面的内容,这里说一下自己的思路吧.</p>

<h3>单例模式</h3>

<blockquote><p>定义 - 单件模式确保一个类只有一个实例，并且提供一个全局访问点。</p></blockquote>

<p>在javascript中通常我们会创建一个命名空间来包含所有的功能代码. 个人认为单例模式的好处就是可以在多人开发时避免代码的冲突,还可以更好的控制页面里的功能.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>单例模式  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">SNTouch</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">Version</span><span class="o">:</span> <span class="s2">&quot;0.7&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">Author</span><span class="o">:</span> <span class="s2">&quot;PPanda&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){},</span>
</span><span class='line'><span class="nx">Widget</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>工厂模式</h3>

<blockquote><p>定义 - <em>抽象工厂模式</em>是每个抽象产品派生多个具体产品类，每个抽象工厂派生多个具体工厂类，每个具体工厂负责多个（一系列）具体产品的实例创建。<em>工厂方法模式</em>是每个抽象产品派生多个具体产品类，每个抽象工厂类派生多个具体工厂类，每个具体工厂类负责一个具体产品的实例创建。</p></blockquote>

<!--more -->

]]></content>
  </entry>
  
</feed>
